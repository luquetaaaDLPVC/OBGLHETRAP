from colorama import init, Fore, Style
import matplotlib.pyplot as plt

# Initialize colorama
init(autoreset=True)

# List of students in recovery
recuperacao = [
    "ANA JULIA LIBORIO SOUZA",
    "BEATRIZ VICTORIA CARIAS DA SILVA",
    "CAIO VICTOR DA COSTA SANTOS",
    "GABRIEL ALVES MENDES DA SILVA",
    "GUILHERME DOS SANTOS DA SILVA",
    "ISABELLY APARECIDA DA SILVA",
    "KAUAN REGIS DOS SANTOS NASCIMENTO",
    "MIGUEL FERNANDES OLIVEIRA",
    "MURILO MATIAS DOS SANTOS",
    "ANA GABRIELE DA SILVA NEIVA DE LIMA",
    "BIANCA FERREIRA DOS SANTOS",
    "CLAUDIO DIAS DE OLIVEIRA JUNIOR",
    "DAVID LUIS OLIVEIRA DE BARROS",
    "DOUGLAS DE MORAES LOPES DA SILVA",
    "ELAINE ROCHA COSTA",
    "EMILLY ARAUJO SANTOS",
    "GABRIEL RICARDO GONCALVES DA SILVA",
    "KELVIN XAVIER DE SOUZA",
    "LUCAS DE SOUZA GONCALVES",
    "FLAVIA EDUARDA DE OLIVEIRA SANTOS",
]

def validar_nome(nome):
    """Validates and formats the student's name."""
    nome_formatado = nome.strip().upper()
    nome_formatado = ''.join(e for e in nome_formatado if e.isalnum() or e.isspace())
    if not nome_formatado:
        print(f"{Fore.RED}Nome inv√°lido! Por favor, insira um nome v√°lido.{Style.RESET_ALL}")
        return None
    return nome_formatado

def solicitar_notas():
    """Prompts the user to input grades for four bimesters."""
    notas = []
    for i in range(1, 5):
        while True:
            try:
                nota = float(input(f"{Fore.YELLOW}Digite a nota do {i}¬∫ bimestre (0 a 10): {Style.RESET_ALL}"))
                if 0 <= nota <= 10:
                    notas.append(nota)
                    break
                else:
                    print(f"{Fore.RED}A nota deve ser um n√∫mero entre 0 e 10.{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}Entrada inv√°lida. Digite um n√∫mero.{Style.RESET_ALL}")
    return notas

def calcular_media(notas):
    """Calculates the sum and average of the grades."""
    soma = sum(notas)
    media = soma / len(notas) if notas else 0
    return soma, media

def exibir_grafico(notas):
    """Displays a bar graph of the grades."""
    bimestres = ['1¬∫', '2¬∫', '3¬∫', '4¬∫']
    plt.bar(bimestres, notas, color='skyblue')
    plt.xlabel('Bimestres')
    plt.ylabel('Notas')
    plt.title('Desempenho Bimestral do Aluno')
    plt.ylim(0, 10)
    plt.axhline(y=5, color='r', linestyle='--', label='Nota de Aprova√ß√£o')  # Add a line for passing grade
    plt.legend()
    plt.show()

def exibir_resultado(nome, soma, media, notas):
    """Displays the results of the student's performance."""
    print(f"\n{Fore.CYAN}Soma das notas: {soma:.2f}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}M√©dia: {media:.2f}{Style.RESET_ALL}")
    if nome in recuperacao:
        print(f"{Fore.YELLOW}‚ö†Ô∏è O aluno est√° na lista de recupera√ß√£o. Precisa de um esfor√ßo extra! üí™{Style.RESET_ALL}")
    else:
        if soma >= 20:
            print(f"{Fore.GREEN}‚úîÔ∏è Parab√©ns, o aluno est√° aprovado! üéâ{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚ùå Infelizmente, o aluno est√° reprovado. üòî{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}Dica: Revise os conte√∫dos dos bimestres para melhorar!{Style.RESET_ALL}")
    exibir_grafico(notas)

def main():
    """Main function to execute the program."""
    nome = input(f"{Fore.YELLOW}")